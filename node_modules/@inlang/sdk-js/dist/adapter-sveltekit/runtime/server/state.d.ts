import type { InlangConfigModule } from "@inlang/core/config";
import type { RequestEvent } from "@sveltejs/kit";
import type { SvelteKitServerRuntime } from "./runtime.js";
export declare const initState: (module: InlangConfigModule) => Promise<{
    referenceLanguage: string;
    languages: string[];
}>;
export declare const reloadResources: () => Promise<(Record<string, unknown> & {
    type: "Resource";
    metadata?: any;
} & {
    languageTag: Record<string, unknown> & {
        type: "LanguageTag";
        metadata?: any;
    } & {
        name: string;
    };
    body: (Record<string, unknown> & {
        type: "Message";
        metadata?: any;
    } & {
        id: Record<string, unknown> & {
            type: "Identifier";
            metadata?: any;
        } & {
            name: string;
        };
        pattern: Record<string, unknown> & {
            type: "Pattern";
            metadata?: any;
        } & {
            elements: ((Record<string, unknown> & {
                type: "Text";
                metadata?: any;
            } & {
                value: string;
            }) | (Record<string, unknown> & {
                type: "Placeholder";
                metadata?: any;
            } & {
                body: Record<string, unknown> & {
                    type: "VariableReference";
                    metadata?: any;
                } & {
                    name: string;
                };
            }))[];
        };
    })[];
})[]>;
export declare const getResource: (language: string) => (Record<string, unknown> & {
    type: "Resource";
    metadata?: any;
} & {
    languageTag: Record<string, unknown> & {
        type: "LanguageTag";
        metadata?: any;
    } & {
        name: string;
    };
    body: (Record<string, unknown> & {
        type: "Message";
        metadata?: any;
    } & {
        id: Record<string, unknown> & {
            type: "Identifier";
            metadata?: any;
        } & {
            name: string;
        };
        pattern: Record<string, unknown> & {
            type: "Pattern";
            metadata?: any;
        } & {
            elements: ((Record<string, unknown> & {
                type: "Text";
                metadata?: any;
            } & {
                value: string;
            }) | (Record<string, unknown> & {
                type: "Placeholder";
                metadata?: any;
            } & {
                body: Record<string, unknown> & {
                    type: "VariableReference";
                    metadata?: any;
                } & {
                    name: string;
                };
            }))[];
        };
    })[];
}) | undefined;
export declare const addRuntimeToLocals: (locals: RequestEvent["locals"], runtime: SvelteKitServerRuntime) => {
    language: string | undefined;
    i: import("../../../runtime/inlang-function.js").InlangFunction<import("../../../runtime/inlang-function.js").InlangFunctionBaseArgs>;
    referenceLanguage: string;
    languages: string[];
    loadResource: (language: string) => (Record<string, unknown> & {
        type: "Resource";
        metadata?: any;
    } & {
        languageTag: Record<string, unknown> & {
            type: "LanguageTag";
            metadata?: any;
        } & {
            name: string;
        };
        body: (Record<string, unknown> & {
            type: "Message";
            metadata?: any;
        } & {
            id: Record<string, unknown> & {
                type: "Identifier";
                metadata?: any;
            } & {
                name: string;
            };
            pattern: Record<string, unknown> & {
                type: "Pattern";
                metadata?: any;
            } & {
                elements: ((Record<string, unknown> & {
                    type: "Text";
                    metadata?: any;
                } & {
                    value: string;
                }) | (Record<string, unknown> & {
                    type: "Placeholder";
                    metadata?: any;
                } & {
                    body: Record<string, unknown> & {
                        type: "VariableReference";
                        metadata?: any;
                    } & {
                        name: string;
                    };
                }))[];
            };
        })[];
    }) | undefined;
    switchLanguage: (language: string) => void;
};
export declare const getRuntimeFromLocals: (locals: RequestEvent["locals"]) => SvelteKitServerRuntime;
//# sourceMappingURL=state.d.ts.map