type InitSvelteKitServerRuntimeArgs = {
    referenceLanguage: Language;
    languages: Language[];
    language: Language | undefined;
};
export declare const initSvelteKitServerRuntime: ({ language, referenceLanguage, languages, }: InitSvelteKitServerRuntimeArgs) => {
    language: string | undefined;
    i: import("../../../runtime/inlang-function.js").InlangFunction<import("../../../runtime/inlang-function.js").InlangFunctionBaseArgs>;
    referenceLanguage: string;
    languages: string[];
    loadResource: (language: string) => (Record<string, unknown> & {
        type: "Resource";
        metadata?: any;
    } & {
        languageTag: Record<string, unknown> & {
            type: "LanguageTag";
            metadata?: any;
        } & {
            name: string;
        };
        body: (Record<string, unknown> & {
            type: "Message";
            metadata?: any;
        } & {
            id: Record<string, unknown> & {
                type: "Identifier";
                metadata?: any;
            } & {
                name: string;
            };
            pattern: Record<string, unknown> & {
                type: "Pattern";
                metadata?: any;
            } & {
                elements: ((Record<string, unknown> & {
                    type: "Text";
                    metadata?: any;
                } & {
                    value: string;
                }) | (Record<string, unknown> & {
                    type: "Placeholder";
                    metadata?: any;
                } & {
                    body: Record<string, unknown> & {
                        type: "VariableReference";
                        metadata?: any;
                    } & {
                        name: string;
                    };
                }))[];
            };
        })[];
    }) | undefined;
    switchLanguage: (language: string) => void;
};
export type SvelteKitServerRuntime = Awaited<ReturnType<typeof initSvelteKitServerRuntime>>;
export {};
//# sourceMappingURL=runtime.d.ts.map