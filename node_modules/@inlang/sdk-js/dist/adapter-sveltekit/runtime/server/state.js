import { initConfig } from "../../../config/config.js";
import { inlangSymbol } from "../shared/utils.js";
let config;
export const initState = async (module) => {
    if (!config && !import.meta.env.DEV) {
        try {
            const { languages, referenceLanguage, resources, } = await import("virtual:inlang-static");
            config = {
                referenceLanguage,
                languages,
                readResources: async () => resources,
                writeResources: async () => undefined,
            };
        }
        catch { /* empty */ }
    }
    if (!config) {
        config = await initConfig(module);
    }
    await reloadResources();
    return {
        referenceLanguage: config.referenceLanguage,
        languages: config.languages,
    };
};
// ------------------------------------------------------------------------------------------------
let _resources = [];
// TODO: fix resources if needed (add missing Keys, etc.)
export const reloadResources = async () => (_resources = await config.readResources({ config }));
export const getResource = (language) => _resources.find(({ languageTag: { name } }) => name === language);
// ------------------------------------------------------------------------------------------------
export const addRuntimeToLocals = (locals, runtime) => (locals[inlangSymbol] = runtime);
export const getRuntimeFromLocals = (locals) => locals[inlangSymbol];
