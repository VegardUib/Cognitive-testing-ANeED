import type { Language } from "@inlang/core/ast";
import type * as Kit from "@sveltejs/kit";
import type { Detector } from "../../../detectors/types.js";
import type { DataPayload } from "../shared/wrappers.js";
import { SvelteKitServerRuntime } from "./runtime.js";
import type { InlangConfigModule } from "@inlang/core/config";
type WrappedHandle = (input: Parameters<Kit.Handle>[0], runtime: SvelteKitServerRuntime) => ReturnType<Kit.Handle>;
type HandleOptions = {
    inlangConfigModule: Promise<InlangConfigModule>;
    getLanguage: (event: Kit.RequestEvent) => Language | undefined;
    initDetectors?: (event: Kit.RequestEvent) => Detector[];
    redirect?: {
        throwable: typeof Kit.redirect;
        getPath: (event: Kit.RequestEvent, language: Language) => URL | string;
    };
};
export declare const initHandleWrapper: (options: HandleOptions) => {
    wrap: (handle: WrappedHandle) => Kit.Handle;
};
export declare const initRootLayoutServerLoadWrapper: <LayoutServerLoad extends Kit.ServerLoad<any, any, any, any>>() => {
    wrap: <Data extends void | Record<string, any>>(load: (event: Parameters<LayoutServerLoad>[0], runtime: SvelteKitServerRuntime) => Data | Promise<Data>) => (event: Parameters<LayoutServerLoad>[0]) => Promise<Data & DataPayload>;
};
export declare const initServerLoadWrapper: <ServerLoad extends Kit.ServerLoad<any, any, any, any>>() => {
    wrap: <Data extends void | Record<string, any>>(fn: (event: Parameters<ServerLoad>[0], runtime: SvelteKitServerRuntime) => Data | Promise<Data>) => (event: Parameters<ServerLoad>[0]) => Promise<Data>;
};
export declare const initActionWrapper: <Action extends Kit.Action<any, any, any>>() => {
    wrap: <Data extends void | Record<string, any>>(fn: (event: Parameters<Action>[0], runtime: SvelteKitServerRuntime) => Data | Promise<Data>) => (event: Parameters<Action>[0]) => Promise<Data>;
};
export declare const initRequestHandlerWrapper: <RequestHandler extends Kit.RequestHandler<any, any>>() => {
    wrap: <Data extends void | Record<string, any>>(fn: (event: Parameters<RequestHandler>[0], runtime: SvelteKitServerRuntime) => Data | Promise<Data>) => (event: Parameters<RequestHandler>[0]) => Promise<Data>;
};
export {};
//# sourceMappingURL=wrappers.d.ts.map