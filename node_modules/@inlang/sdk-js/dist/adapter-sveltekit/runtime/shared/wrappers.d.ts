import { browser } from "$app/environment";
import type { Language } from "@inlang/core/ast";
import type * as Kit from "@sveltejs/kit";
import { Detector } from "../../../detectors/index.js";
import { SvelteKitClientRuntime } from "../client/runtime.js";
import { DataWithRuntime, EventWithRuntimePromise } from "./utils.js";
export type DataPayload = {
    referenceLanguage: Language;
    languages: Language[];
    language: Language | undefined;
};
export declare const initRootLayoutLoadWrapper: <LayoutLoad extends Kit.Load<any, any, any, any, any>>(options: {
    initDetectors?: ((event: Parameters<LayoutLoad>[0]) => Detector[]) | undefined;
}) => {
    wrap: <Data extends void | Record<string, any>>(load: (event: EventWithRuntimePromise<Parameters<LayoutLoad>[0]>, runtime: SvelteKitClientRuntime) => Data | Promise<Data>) => (event: Parameters<LayoutLoad>[0]) => Promise<DataWithRuntime<Data>>;
};
export declare const initRootPageLoadWrapper: <PageLoad extends Kit.Load<any, any, any, any, any>>(options: {
    browser: boolean;
    initDetectors?: ((event: Parameters<PageLoad>[0]) => Detector[]) | undefined;
    redirect?: {
        throwable: typeof Kit.redirect;
        getPath: (event: Parameters<PageLoad>[0], language: Language) => URL | string;
    } | undefined;
}) => {
    wrap: <Data extends void | Record<string, any>>(load: (event: EventWithRuntimePromise<Parameters<PageLoad>[0]>, runtime: SvelteKitClientRuntime) => Data | Promise<Data>) => (event: Parameters<PageLoad>[0]) => Promise<Data>;
};
export declare const initLoadWrapper: <Load extends Kit.Load<any, any, any, any, any>>() => {
    wrap: <Data extends void | Record<string, any>>(load: (event: EventWithRuntimePromise<Parameters<Load>[0]>, runtime: SvelteKitClientRuntime) => Data | Promise<Data>) => (event: Parameters<Load>[0]) => Promise<Data>;
};
//# sourceMappingURL=wrappers.d.ts.map