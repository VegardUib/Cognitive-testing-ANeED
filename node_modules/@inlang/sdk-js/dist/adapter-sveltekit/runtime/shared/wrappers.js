import { browser } from "$app/environment";
import { detectLanguage } from "../../../detectors/index.js";
import { initSvelteKitClientRuntime } from "../client/runtime.js";
import { addRuntimePromiseToEvent, addRuntimeToData, getRuntimePromiseFromEvent, wait, } from "./utils.js";
// ------------------------------------------------------------------------------------------------
let initializedRuntime = {};
const initRuntimeForWrappers = async (event, options) => {
    const existingPromise = getRuntimePromiseFromEvent(event);
    if (existingPromise)
        return existingPromise;
    if (!options) {
        await wait(0);
        return initRuntimeForWrappers(event, options);
    }
    let resolveRuntimePromise = undefined;
    addRuntimePromiseToEvent(event, new Promise((resolve) => (resolveRuntimePromise = resolve)));
    const data = event.data;
    const { referenceLanguage = undefined, languages = [] } = data;
    // TODO: only add this conditional logic if shared detection strategies get used
    const language = data.language || !options.initDetectors
        ? data.language
        : await detectLanguage({ referenceLanguage, languages }, ...options.initDetectors(event));
    const runtime = initializedRuntime[language] ||
        (await initSvelteKitClientRuntime({
            fetch: event.fetch,
            language,
            referenceLanguage,
            languages,
        }));
    resolveRuntimePromise(runtime);
    if (browser && language) {
        initializedRuntime = { [language]: runtime };
    }
    return runtime;
};
export const initRootLayoutLoadWrapper = (options) => ({
    wrap: (load) => async (event) => {
        const runtime = await initRuntimeForWrappers(event, options);
        const payload = await load(event, runtime);
        return addRuntimeToData({
            ...(payload || event.data),
            referenceLanguage: runtime.referenceLanguage,
            languages: runtime.languages,
            language: runtime.language, // TODO: only pass this if `language` gets detected on server
        }, runtime);
    },
});
// ------------------------------------------------------------------------------------------------
export const initRootPageLoadWrapper = (options) => ({
    wrap: (load) => async (event) => {
        const data = await event.parent();
        const language = data.language;
        if (!language && options.browser) {
            const { referenceLanguage, languages } = data;
            if ((!language || !languages.includes(language)) && options.redirect) {
                const detectedLanguage = await detectLanguage({ referenceLanguage, languages }, ...(options.initDetectors ? options.initDetectors(event) : []));
                throw options.redirect.throwable(307, options.redirect.getPath(event, detectedLanguage).toString());
            }
        }
        const runtime = await initRuntimeForWrappers(event);
        return load(event, runtime);
    },
});
// ------------------------------------------------------------------------------------------------
export const initLoadWrapper = () => ({
    wrap: (load) => async (event) => {
        const runtime = await initRuntimeForWrappers(event);
        return load(event, runtime);
    },
});
