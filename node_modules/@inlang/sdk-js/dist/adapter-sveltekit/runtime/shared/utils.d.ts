import type { Language } from "@inlang/core/ast";
import type { LoadEvent } from "@sveltejs/kit";
import type { SvelteKitClientRuntime } from "../client/runtime.js";
export declare const inlangSymbol: unique symbol;
export type DataWithRuntime<Data extends Record<string, unknown> | void> = Data & {
    [inlangSymbol]: SvelteKitClientRuntime;
};
export declare const addRuntimeToData: <Data extends void | Record<string, unknown>>(data: Data, runtime: SvelteKitClientRuntime) => DataWithRuntime<Data>;
export declare const getRuntimeFromData: <Data extends void | Record<string, unknown>>(data: DataWithRuntime<Data>) => {
    language: string | undefined;
    i: import("../../../runtime/inlang-function.js").InlangFunction<import("../../../runtime/inlang-function.js").InlangFunctionBaseArgs>;
    referenceLanguage: string;
    languages: string[];
    loadResource: (language: string) => Promise<any>;
    switchLanguage: (language: string) => void;
};
export type EventWithRuntimePromise<Event extends LoadEvent> = Event & {
    params: {
        [inlangSymbol]: Promise<SvelteKitClientRuntime>;
    };
};
export declare const addRuntimePromiseToEvent: <Event_1 extends LoadEvent<Partial<Record<string, string>>, Record<string, any> | null, Record<string, any>, string | null>>(event: Event_1, runtimePromise: Promise<SvelteKitClientRuntime>) => EventWithRuntimePromise<Event_1>;
export declare const getRuntimePromiseFromEvent: <Event_1 extends LoadEvent<Partial<Record<string, string>>, Record<string, any> | null, Record<string, any>, string | null>>(event: EventWithRuntimePromise<Event_1>) => Promise<SvelteKitClientRuntime>;
export declare const replaceLanguageInUrl: (url: URL, language: Language) => URL;
export declare const wait: (ms: number) => Promise<unknown>;
//# sourceMappingURL=utils.d.ts.map