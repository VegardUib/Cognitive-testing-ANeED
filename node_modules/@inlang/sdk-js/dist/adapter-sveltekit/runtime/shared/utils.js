export const inlangSymbol = Symbol.for("inlang");
export const addRuntimeToData = (data, runtime) => ({ ...(data || {}), [inlangSymbol]: runtime });
export const getRuntimeFromData = (data) => data[inlangSymbol];
export const addRuntimePromiseToEvent = (event, runtimePromise) => {
    ;
    event.params[inlangSymbol] = runtimePromise;
    return event;
};
export const getRuntimePromiseFromEvent = (event) => event.params[inlangSymbol];
// ------------------------------------------------------------------------------------------------
export const replaceLanguageInUrl = (url, language) => new URL(`${url.origin}${replaceLanguageInSlug(url.pathname, language)}${url.search}${url.hash}`);
const replaceLanguageInSlug = (pathname, language) => {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const [_, __, ...path] = pathname.split("/");
    return `/${language}${path.length ? `/${path.join("/")}` : ""}`;
};
// ------------------------------------------------------------------------------------------------
export const wait = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
