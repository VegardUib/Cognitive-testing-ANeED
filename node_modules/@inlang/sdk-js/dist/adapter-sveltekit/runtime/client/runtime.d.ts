import type { LoadEvent } from "@sveltejs/kit";
type InitSvelteKitClientRuntimeArgs = {
    fetch: LoadEvent["fetch"];
    referenceLanguage: Language;
    languages: Language[];
    language: Language | undefined;
};
export declare const initSvelteKitClientRuntime: ({ fetch, language, referenceLanguage, languages, }: InitSvelteKitClientRuntimeArgs) => Promise<{
    language: string | undefined;
    i: import("../../../runtime/inlang-function.js").InlangFunction<import("../../../runtime/inlang-function.js").InlangFunctionBaseArgs>;
    referenceLanguage: string;
    languages: string[];
    loadResource: (language: string) => Promise<any>;
    switchLanguage: (language: string) => void;
}>;
export type SvelteKitClientRuntime = Awaited<ReturnType<typeof initSvelteKitClientRuntime>>;
export {};
//# sourceMappingURL=runtime.d.ts.map