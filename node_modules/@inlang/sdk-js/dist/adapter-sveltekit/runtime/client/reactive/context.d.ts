import type * as Ast from "@inlang/core/ast";
import { type Readable } from "svelte/store";
import type { RelativeUrl } from "../../../../index.js";
import type { SvelteKitClientRuntime } from "../index.js";
import type * as Runtime from "../../../../runtime/index.js";
type RuntimeContext<Language extends Ast.Language = Ast.Language, InlangFunction extends Runtime.InlangFunction = Runtime.InlangFunction> = {
    language: Readable<Language>;
    referenceLanguage: Language;
    languages: Language[];
    i: Readable<InlangFunction>;
    switchLanguage: (language: Language) => Promise<void>;
    loadResource: SvelteKitClientRuntime["loadResource"];
    route: (href: RelativeUrl) => RelativeUrl;
};
export declare const getRuntimeFromContext: () => RuntimeContext<string, Runtime.InlangFunction<import("../../../../runtime/inlang-function.js").InlangFunctionBaseArgs>>;
export declare const addRuntimeToContext: (runtime: SvelteKitClientRuntime) => void;
export {};
//# sourceMappingURL=context.d.ts.map