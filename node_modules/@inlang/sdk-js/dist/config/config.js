import { setupConfig } from "@inlang/core/config";
import { initialize$import } from "@inlang/core/environment";
import { dedent } from "ts-dedent";
export class InlangError extends Error {
}
export const initInlangEnvironment = async () => {
    const fs = await import("node:fs/promises").catch(() => new Proxy({}, {
        get: (target, key) => {
            if (key === "then")
                return Promise.resolve(target);
            return () => {
                throw new InlangError("`node:fs/promises` is not available in the current environment");
            };
        },
    }));
    return {
        $fs: fs,
        $import: initialize$import({
            fs,
            fetch: async (...args) => await fetch(...args).catch((error) => {
                // TODO: create an issue
                if (error instanceof TypeError &&
                    error.cause?.code === "UND_ERR_CONNECT_TIMEOUT") {
                    throw new InlangError(dedent `

							Node.js failed to resolve the URL. This can happen sometimes during development. Usually restarting the server helps.

						`, { cause: error });
                }
                throw error;
            }),
        }),
    };
};
export const initConfig = async (module) => {
    if (!module) {
        throw Error("could not read `inlang.config.js`");
    }
    const env = await initInlangEnvironment();
    return setupConfig({ module, env });
};
