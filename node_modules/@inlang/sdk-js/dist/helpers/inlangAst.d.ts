import { types } from "recast";
import type { ExpressionKind } from "ast-types/gen/kinds.js";
import type { FunctionDeclaration, Node } from "estree";
export declare const rewriteLoadOrHandleParameters: (ast: types.namedTypes.FunctionExpression | types.namedTypes.ArrowFunctionExpression, availableImports?: [string, string][]) => void;
export declare const extractWrappableExpression: ({ ast, name, fallbackFunction, availableImports, }: {
    ast: types.namedTypes.Node;
    name: "load" | "handle";
    fallbackFunction?: ExpressionKind | undefined;
    availableImports?: [string, string][] | undefined;
}) => ExpressionKind;
export declare const replaceOrAddExportNamedFunction: (ast: types.namedTypes.Program, name: string, replacementAst: types.namedTypes.ExportNamedDeclaration) => void;
export declare const getWrappedExport: (options: unknown, params: (FunctionDeclaration | ExpressionKind)[], exportedName: string, wrapperName: string) => types.namedTypes.ExportNamedDeclaration;
export declare const getSdkImportedModules: (ast: types.namedTypes.Node | Node, remove?: boolean) => [string, string][];
export declare const replaceSdkImports: (ast: types.namedTypes.Node | Node, from: "locals") => void;
//# sourceMappingURL=inlangAst.d.ts.map