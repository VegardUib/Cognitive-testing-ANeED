import { createInlangFunction, } from "./inlang-function.js";
export const isAsync = (p) => !!p && typeof p === "object" && typeof p.then === "function";
const fallbackInlangFunction = () => "";
export const initRuntime = (context) => initBaseRuntime(context);
export const initBaseRuntime = ({ readResource }, state = {
    resources: new Map(),
    language: undefined,
    i: undefined,
}) => {
    const loadResourcePromises = new Map();
    let isLoadResourceFunctionAsync = false;
    const loadResource = (language) => {
        if (state.resources.has(language))
            return isLoadResourceFunctionAsync
                ? Promise.resolve()
                : undefined;
        if (loadResourcePromises.has(language))
            return loadResourcePromises.get(language);
        const setResource = (resource) => resource && state.resources.set(language, resource);
        const resourceMaybePromise = readResource(language);
        if (!isAsync(resourceMaybePromise)) {
            setResource(resourceMaybePromise);
            return undefined;
        }
        isLoadResourceFunctionAsync = true;
        // eslint-disable-next-line no-async-promise-executor
        const promise = new Promise(async (resolve) => {
            const resource = await resourceMaybePromise;
            setResource(resource);
            loadResourcePromises.delete(language);
            resolve();
        });
        loadResourcePromises.set(language, promise);
        return promise;
    };
    const switchLanguage = (language) => {
        state.language = language;
        state.i = undefined;
    };
    const getLanguage = () => state.language;
    const getInlangFunction = () => {
        if (state.i)
            return state.i;
        const resource = state.resources.get(state.language);
        if (!resource)
            return fallbackInlangFunction;
        return (state.i = createInlangFunction(resource));
    };
    return {
        loadResource,
        switchLanguage,
        get language() {
            return getLanguage();
        },
        get i() {
            return getInlangFunction();
        },
    };
};
export const initRuntimeWithLanguageInformation = (context) => {
    const runtime = initBaseRuntime(context);
    return {
        ...runtime,
        get language() {
            return runtime.language;
        },
        get i() {
            return runtime.i;
        },
        get referenceLanguage() {
            return context.referenceLanguage;
        },
        get languages() {
            return context.languages;
        },
    };
};
