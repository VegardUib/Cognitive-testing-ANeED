import type { Resource } from "@inlang/core/ast";
import type * as Ast from "@inlang/core/ast";
import { InlangFunctionBaseArgs, InlangFunction } from "./inlang-function.js";
export declare const isAsync: <T>(p: unknown) => p is Promise<T>;
type MaybePromise<T> = T | Promise<T>;
export type RuntimeContext<Language extends Ast.Language = Ast.Language, ReadResourcesMaybePromise extends (Ast.Resource | undefined) | Promise<Ast.Resource | undefined> = MaybePromise<Resource | undefined>> = {
    readResource: (language: Language) => ReadResourcesMaybePromise;
};
export type RuntimeState<Language extends Ast.Language = Ast.Language> = {
    resources: Map<Language, Ast.Resource>;
    language: Language | undefined;
    i: InlangFunction<any> | undefined;
};
export declare const initRuntime: <Language_1 extends string, ReadResourcesMaybePromise extends (Record<string, unknown> & {
    type: "Resource";
    metadata?: any;
} & {
    languageTag: Record<string, unknown> & {
        type: "LanguageTag";
        metadata?: any;
    } & {
        name: string;
    };
    body: (Record<string, unknown> & {
        type: "Message";
        metadata?: any;
    } & {
        id: Record<string, unknown> & {
            type: "Identifier";
            metadata?: any;
        } & {
            name: string;
        };
        pattern: Record<string, unknown> & {
            type: "Pattern";
            metadata?: any;
        } & {
            elements: ((Record<string, unknown> & {
                type: "Text";
                metadata?: any;
            } & {
                value: string;
            }) | (Record<string, unknown> & {
                type: "Placeholder";
                metadata?: any;
            } & {
                body: Record<string, unknown> & {
                    type: "VariableReference";
                    metadata?: any;
                } & {
                    name: string;
                };
            }))[];
        };
    })[];
}) | Promise<(Record<string, unknown> & {
    type: "Resource";
    metadata?: any;
} & {
    languageTag: Record<string, unknown> & {
        type: "LanguageTag";
        metadata?: any;
    } & {
        name: string;
    };
    body: (Record<string, unknown> & {
        type: "Message";
        metadata?: any;
    } & {
        id: Record<string, unknown> & {
            type: "Identifier";
            metadata?: any;
        } & {
            name: string;
        };
        pattern: Record<string, unknown> & {
            type: "Pattern";
            metadata?: any;
        } & {
            elements: ((Record<string, unknown> & {
                type: "Text";
                metadata?: any;
            } & {
                value: string;
            }) | (Record<string, unknown> & {
                type: "Placeholder";
                metadata?: any;
            } & {
                body: Record<string, unknown> & {
                    type: "VariableReference";
                    metadata?: any;
                } & {
                    name: string;
                };
            }))[];
        };
    })[];
}) | undefined> | undefined, InlangFunctionArgs extends InlangFunctionBaseArgs = InlangFunctionBaseArgs>(context: RuntimeContext<Language_1, ReadResourcesMaybePromise>) => {
    loadResource: (language: Language_1) => ReadResourcesMaybePromise;
    switchLanguage: (language: Language_1) => void;
    readonly language: Language_1 | undefined;
    readonly i: InlangFunction<InlangFunctionArgs>;
};
export type Runtime = ReturnType<typeof initRuntime>;
export declare const initBaseRuntime: <Language_1 extends string, ReadResourcesMaybePromise extends (Record<string, unknown> & {
    type: "Resource";
    metadata?: any;
} & {
    languageTag: Record<string, unknown> & {
        type: "LanguageTag";
        metadata?: any;
    } & {
        name: string;
    };
    body: (Record<string, unknown> & {
        type: "Message";
        metadata?: any;
    } & {
        id: Record<string, unknown> & {
            type: "Identifier";
            metadata?: any;
        } & {
            name: string;
        };
        pattern: Record<string, unknown> & {
            type: "Pattern";
            metadata?: any;
        } & {
            elements: ((Record<string, unknown> & {
                type: "Text";
                metadata?: any;
            } & {
                value: string;
            }) | (Record<string, unknown> & {
                type: "Placeholder";
                metadata?: any;
            } & {
                body: Record<string, unknown> & {
                    type: "VariableReference";
                    metadata?: any;
                } & {
                    name: string;
                };
            }))[];
        };
    })[];
}) | Promise<(Record<string, unknown> & {
    type: "Resource";
    metadata?: any;
} & {
    languageTag: Record<string, unknown> & {
        type: "LanguageTag";
        metadata?: any;
    } & {
        name: string;
    };
    body: (Record<string, unknown> & {
        type: "Message";
        metadata?: any;
    } & {
        id: Record<string, unknown> & {
            type: "Identifier";
            metadata?: any;
        } & {
            name: string;
        };
        pattern: Record<string, unknown> & {
            type: "Pattern";
            metadata?: any;
        } & {
            elements: ((Record<string, unknown> & {
                type: "Text";
                metadata?: any;
            } & {
                value: string;
            }) | (Record<string, unknown> & {
                type: "Placeholder";
                metadata?: any;
            } & {
                body: Record<string, unknown> & {
                    type: "VariableReference";
                    metadata?: any;
                } & {
                    name: string;
                };
            }))[];
        };
    })[];
}) | undefined> | undefined, InlangFunctionArgs extends InlangFunctionBaseArgs = InlangFunctionBaseArgs>({ readResource }: RuntimeContext<Language_1, ReadResourcesMaybePromise>, state?: RuntimeState<Language_1>) => {
    loadResource: (language: Language_1) => ReadResourcesMaybePromise;
    switchLanguage: (language: Language_1) => void;
    readonly language: Language_1 | undefined;
    readonly i: InlangFunction<InlangFunctionArgs>;
};
export declare const initRuntimeWithLanguageInformation: <Language_1 extends string, ReadResourcesMaybePromise extends (Record<string, unknown> & {
    type: "Resource";
    metadata?: any;
} & {
    languageTag: Record<string, unknown> & {
        type: "LanguageTag";
        metadata?: any;
    } & {
        name: string;
    };
    body: (Record<string, unknown> & {
        type: "Message";
        metadata?: any;
    } & {
        id: Record<string, unknown> & {
            type: "Identifier";
            metadata?: any;
        } & {
            name: string;
        };
        pattern: Record<string, unknown> & {
            type: "Pattern";
            metadata?: any;
        } & {
            elements: ((Record<string, unknown> & {
                type: "Text";
                metadata?: any;
            } & {
                value: string;
            }) | (Record<string, unknown> & {
                type: "Placeholder";
                metadata?: any;
            } & {
                body: Record<string, unknown> & {
                    type: "VariableReference";
                    metadata?: any;
                } & {
                    name: string;
                };
            }))[];
        };
    })[];
}) | Promise<(Record<string, unknown> & {
    type: "Resource";
    metadata?: any;
} & {
    languageTag: Record<string, unknown> & {
        type: "LanguageTag";
        metadata?: any;
    } & {
        name: string;
    };
    body: (Record<string, unknown> & {
        type: "Message";
        metadata?: any;
    } & {
        id: Record<string, unknown> & {
            type: "Identifier";
            metadata?: any;
        } & {
            name: string;
        };
        pattern: Record<string, unknown> & {
            type: "Pattern";
            metadata?: any;
        } & {
            elements: ((Record<string, unknown> & {
                type: "Text";
                metadata?: any;
            } & {
                value: string;
            }) | (Record<string, unknown> & {
                type: "Placeholder";
                metadata?: any;
            } & {
                body: Record<string, unknown> & {
                    type: "VariableReference";
                    metadata?: any;
                } & {
                    name: string;
                };
            }))[];
        };
    })[];
}) | undefined> | undefined, InlangFunctionArgs extends InlangFunctionBaseArgs = InlangFunctionBaseArgs>(context: RuntimeContext<Language_1, ReadResourcesMaybePromise> & {
    referenceLanguage: Language_1;
    languages: Language_1[];
}) => {
    language: Language_1 | undefined;
    i: InlangFunction<InlangFunctionArgs>;
    referenceLanguage: Language_1;
    languages: Language_1[];
    loadResource: (language: Language_1) => ReadResourcesMaybePromise;
    switchLanguage: (language: Language_1) => void;
};
export {};
//# sourceMappingURL=runtime.d.ts.map