import type { Resource } from "@inlang/core/ast";
type BaseArgs = Record<string, unknown> | never;
type NarrowInlangFunctionArgs<Key, Args> = BaseArgs extends Args ? [Key, Args?] : [Args] extends [never] ? [Key] : [Key, Args];
export type InlangFunctionBaseArgs = Record<string, BaseArgs>;
declare const translated: unique symbol;
export type InlangString = string & {
    readonly [translated]: unknown;
};
export type InlangFunction<InlangFunctionArgs extends InlangFunctionBaseArgs = InlangFunctionBaseArgs> = <Key extends keyof InlangFunctionArgs>(...args: NarrowInlangFunctionArgs<Key, InlangFunctionArgs[Key]>) => InlangString;
export declare const createInlangFunction: <InlangFunctionArgs extends InlangFunctionBaseArgs = InlangFunctionBaseArgs>(resource: Resource) => InlangFunction<InlangFunctionArgs>;
export {};
//# sourceMappingURL=inlang-function.d.ts.map