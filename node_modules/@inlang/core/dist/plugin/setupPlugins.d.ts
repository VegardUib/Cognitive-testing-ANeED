import type { InlangConfig } from "../config/schema.js";
import type { Plugin } from "./types.js";
import { PluginSetupError } from "./errors/PluginSetupError.js";
import type { InlangEnvironment } from "../environment/types.js";
export type ConfigWithSetupPlugins = Omit<Partial<InlangConfig>, "plugins"> & {
    plugins: Plugin[];
};
/**
 * Setup the plugins and process the config callback.
 *
 * Returns a tuple of the config and errors that occured during the setup of plugins.
 * The function mutates the config object. Mutating the config object
 * is expected to:
 *
 * 1. decrease the initial startup time of inlang apps with 10+ plugins
 *     (immutability is expensive).
 * 2. leads to a lightly better API for `setupConfig`.
 * 3. plugins configs are only merged
 *
 * We can change this behaviour
 * if required as this function is only used internally.
 *
 */
export declare function setupPlugins(args: {
    config: Partial<InlangConfig>;
    env: InlangEnvironment;
}): Promise<[config: ConfigWithSetupPlugins, errors?: PluginSetupError[]]>;
//# sourceMappingURL=setupPlugins.d.ts.map