/**
 * Wraps a plugin with error handling
 *
 * ! NOT WORKING RIGHT NOW SEE https://github.com/inlang/inlang/issues/604
 *
 * Increases DX and debuggability by providing better error messages
 * depending on the plugin that caused the error.
 */
export function withErrorHandling(pluginId, obj) {
    return new Proxy(obj, {
        get(target, prop) {
            // Get the property from the original object
            const propValue = target[prop];
            if (typeof propValue === "object") {
                return withErrorHandling(pluginId, propValue);
            }
            else if (typeof propValue !== "function") {
                return propValue;
            }
            return (...args) => {
                try {
                    const returnValue = propValue.apply(this, args);
                    if (typeof returnValue === "object") {
                        return withErrorHandling(pluginId, returnValue);
                    }
                    else if (typeof returnValue === "function") {
                        return (...args) => {
                            try {
                                returnValue.apply(this, args);
                            }
                            catch (error) {
                                logErrorMessage(pluginId, prop, error);
                                throw error;
                            }
                        };
                    }
                    return returnValue;
                }
                catch (error) {
                    logErrorMessage(pluginId, prop, error);
                    throw error;
                }
            };
        },
    });
}
function logErrorMessage(pluginId, prop, error) {
    console.error(`Error in plugin '${pluginId}': Function '${String(prop)}' returned '${error?.message}'`);
}
