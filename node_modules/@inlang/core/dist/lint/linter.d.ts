import type { InlangConfig } from "@inlang/core/config";
import type * as ast from "@inlang/core/ast";
import type { LintedResource } from "./rule.js";
/**
 * Lints the given resources.
 *
 * The linted resources will be returned with lint information added to each node.
 * The returned errors are unexpected errors that occurred during linting, not
 * lint errors themselves.
 *
 * @example
 *   const [lintedResources, errors] = await lint({ config, resources })
 *   if (errors) {
 *     // handle unexpected errors during the linting process.
 *     // this errors are not lint errors themselves!
 *   }
 *   const lints = getLintReports(lintedResources, { options })
 */
export declare const lint: (args: {
    config: Pick<InlangConfig, "lint" | "languages" | "referenceLanguage">;
    resources: ast.Resource[];
}) => Promise<[lintedResources: {
    lint?: import("./rule.js").LintReport[] | undefined;
    type: "Resource";
    metadata?: any;
    languageTag: ast.LanguageTag<{
        Resource: {
            lint?: import("./rule.js").LintReport[] | undefined;
        };
        Message: {
            lint?: import("./rule.js").LintReport[] | undefined;
        };
        Pattern: {
            lint?: import("./rule.js").LintReport[] | undefined;
        };
    }>;
    body: ast.Message<{
        Resource: {
            lint?: import("./rule.js").LintReport[] | undefined;
        };
        Message: {
            lint?: import("./rule.js").LintReport[] | undefined;
        };
        Pattern: {
            lint?: import("./rule.js").LintReport[] | undefined;
        };
    }>[];
}[], errors?: Error[] | undefined]>;
//# sourceMappingURL=linter.d.ts.map