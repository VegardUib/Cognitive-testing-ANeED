import type { LintedNode, LintReport, LintRule } from "./rule.js";
/**
 * Query options for lints.
 */
type QueryOptions = {
    /**
     * @deprecated use `options.recursive` instead for better clarity.
     */
    nested?: false;
    recursive?: false;
    level?: LintRule["level"];
    id?: LintRule["id"];
};
export type getLintReports = (node: LintedNode | LintedNode[], options?: QueryOptions) => LintReport[];
/**
 * Extracts all lint reports that are present on the given node.
 * Per default it will also return lint reports attached to child nodes.
 *
 * @param node the node to extract lint reports from
 * @param options.recursive `default: true` if set to `false` only the lint reports for the given node will be returned
 * @param options.level filter based on the level
 * @param options.id filter based on the lint id
 * @returns a list of lint reports
 */
export declare function getLintReports(node: LintedNode | LintedNode[], options?: {
    level?: LintRule["level"];
    id?: LintRule["id"];
    /** @deprecated use `options.recursive` instead for better clarity. */
    nested?: false;
    recursive?: false;
}): LintReport[];
/**
 * Checks if a given node has lint reports attached to it.
 * Per default it will also return lint reports attached to child nodes.
 *
 * @param node the node to extract lint reports from
 * @param options.recursive `default: true` if set to `false` only the lint reports for the given node will be returned
 * @param options.level filter based on the level
 * @param options.id filter based on the lint id
 * @returns `true` iff the given node has lint reports
 */
export declare const hasLintReports: (node: LintedNode | LintedNode[], options?: QueryOptions) => boolean;
export {};
//# sourceMappingURL=query.d.ts.map