import { z } from "zod";
/**
 * The zod schema for the config.
 *
 * The zod schema can be used to parse and
 * validate the config schema. Read more
 * at https://zod.dev/
 */
export declare const zConfig: z.ZodObject<{
    referenceLanguage: z.ZodEffects<z.ZodString, string, string>;
    languages: z.ZodEffects<z.ZodArray<z.ZodString, "many">, string[], string[]>;
    lint: z.ZodOptional<z.ZodObject<{
        rules: z.ZodArray<z.ZodAny, "many">;
    }, "strip", z.ZodTypeAny, {
        rules: any[];
    }, {
        rules: any[];
    }>>;
    readResources: z.ZodFunction<z.ZodTuple<[z.ZodAny], z.ZodUnknown>, z.ZodPromise<z.ZodArray<z.ZodObject<{
        metadata: z.ZodOptional<z.ZodAny>;
        type: z.ZodLiteral<"Resource">;
        languageTag: z.ZodObject<{
            metadata: z.ZodOptional<z.ZodAny>;
            type: z.ZodLiteral<"LanguageTag">;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "LanguageTag";
            name: string;
            metadata?: any;
        }, {
            type: "LanguageTag";
            name: string;
            metadata?: any;
        }>;
        body: z.ZodArray<z.ZodObject<{
            metadata: z.ZodOptional<z.ZodAny>;
            type: z.ZodLiteral<"Message">;
            id: z.ZodObject<{
                metadata: z.ZodOptional<z.ZodAny>;
                type: z.ZodLiteral<"Identifier">;
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "Identifier";
                name: string;
                metadata?: any;
            }, {
                type: "Identifier";
                name: string;
                metadata?: any;
            }>;
            pattern: z.ZodObject<{
                metadata: z.ZodOptional<z.ZodAny>;
                type: z.ZodLiteral<"Pattern">;
                elements: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    metadata: z.ZodOptional<z.ZodAny>;
                    type: z.ZodLiteral<"Text">;
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "Text";
                    value: string;
                    metadata?: any;
                }, {
                    type: "Text";
                    value: string;
                    metadata?: any;
                }>, z.ZodObject<{
                    metadata: z.ZodOptional<z.ZodAny>;
                    type: z.ZodLiteral<"Placeholder">;
                    body: z.ZodObject<{
                        metadata: z.ZodOptional<z.ZodAny>;
                        type: z.ZodLiteral<"VariableReference">;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "VariableReference";
                        name: string;
                        metadata?: any;
                    }, {
                        type: "VariableReference";
                        name: string;
                        metadata?: any;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "Placeholder";
                    body: {
                        type: "VariableReference";
                        name: string;
                        metadata?: any;
                    };
                    metadata?: any;
                }, {
                    type: "Placeholder";
                    body: {
                        type: "VariableReference";
                        name: string;
                        metadata?: any;
                    };
                    metadata?: any;
                }>]>, "many">;
            }, "strip", z.ZodTypeAny, {
                type: "Pattern";
                elements: ({
                    type: "Text";
                    value: string;
                    metadata?: any;
                } | {
                    type: "Placeholder";
                    body: {
                        type: "VariableReference";
                        name: string;
                        metadata?: any;
                    };
                    metadata?: any;
                })[];
                metadata?: any;
            }, {
                type: "Pattern";
                elements: ({
                    type: "Text";
                    value: string;
                    metadata?: any;
                } | {
                    type: "Placeholder";
                    body: {
                        type: "VariableReference";
                        name: string;
                        metadata?: any;
                    };
                    metadata?: any;
                })[];
                metadata?: any;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "Message";
            id: {
                type: "Identifier";
                name: string;
                metadata?: any;
            };
            pattern: {
                type: "Pattern";
                elements: ({
                    type: "Text";
                    value: string;
                    metadata?: any;
                } | {
                    type: "Placeholder";
                    body: {
                        type: "VariableReference";
                        name: string;
                        metadata?: any;
                    };
                    metadata?: any;
                })[];
                metadata?: any;
            };
            metadata?: any;
        }, {
            type: "Message";
            id: {
                type: "Identifier";
                name: string;
                metadata?: any;
            };
            pattern: {
                type: "Pattern";
                elements: ({
                    type: "Text";
                    value: string;
                    metadata?: any;
                } | {
                    type: "Placeholder";
                    body: {
                        type: "VariableReference";
                        name: string;
                        metadata?: any;
                    };
                    metadata?: any;
                })[];
                metadata?: any;
            };
            metadata?: any;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "Resource";
        body: {
            type: "Message";
            id: {
                type: "Identifier";
                name: string;
                metadata?: any;
            };
            pattern: {
                type: "Pattern";
                elements: ({
                    type: "Text";
                    value: string;
                    metadata?: any;
                } | {
                    type: "Placeholder";
                    body: {
                        type: "VariableReference";
                        name: string;
                        metadata?: any;
                    };
                    metadata?: any;
                })[];
                metadata?: any;
            };
            metadata?: any;
        }[];
        languageTag: {
            type: "LanguageTag";
            name: string;
            metadata?: any;
        };
        metadata?: any;
    }, {
        type: "Resource";
        body: {
            type: "Message";
            id: {
                type: "Identifier";
                name: string;
                metadata?: any;
            };
            pattern: {
                type: "Pattern";
                elements: ({
                    type: "Text";
                    value: string;
                    metadata?: any;
                } | {
                    type: "Placeholder";
                    body: {
                        type: "VariableReference";
                        name: string;
                        metadata?: any;
                    };
                    metadata?: any;
                })[];
                metadata?: any;
            };
            metadata?: any;
        }[];
        languageTag: {
            type: "LanguageTag";
            name: string;
            metadata?: any;
        };
        metadata?: any;
    }>, "many">>>;
    writeResources: z.ZodFunction<z.ZodTuple<[z.ZodAny], z.ZodUnknown>, z.ZodPromise<z.ZodVoid>>;
    ideExtension: z.ZodOptional<z.ZodObject<{
        messageReferenceMatchers: z.ZodOptional<z.ZodArray<z.ZodFunction<z.ZodTuple<[z.ZodObject<{
            documentText: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            documentText: string;
        }, {
            documentText: string;
        }>], z.ZodUnknown>, z.ZodPromise<z.ZodArray<z.ZodObject<{
            messageId: z.ZodString;
            position: z.ZodObject<{
                start: z.ZodObject<{
                    line: z.ZodNumber;
                    character: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    line: number;
                    character: number;
                }, {
                    line: number;
                    character: number;
                }>;
                end: z.ZodObject<{
                    line: z.ZodNumber;
                    character: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    line: number;
                    character: number;
                }, {
                    line: number;
                    character: number;
                }>;
            }, "strip", z.ZodTypeAny, {
                start: {
                    line: number;
                    character: number;
                };
                end: {
                    line: number;
                    character: number;
                };
            }, {
                start: {
                    line: number;
                    character: number;
                };
                end: {
                    line: number;
                    character: number;
                };
            }>;
        }, "strip", z.ZodTypeAny, {
            messageId: string;
            position: {
                start: {
                    line: number;
                    character: number;
                };
                end: {
                    line: number;
                    character: number;
                };
            };
        }, {
            messageId: string;
            position: {
                start: {
                    line: number;
                    character: number;
                };
                end: {
                    line: number;
                    character: number;
                };
            };
        }>, "many">>>, "many">>;
        extractMessageOptions: z.ZodOptional<z.ZodArray<z.ZodObject<{
            callback: z.ZodFunction<z.ZodTuple<[z.ZodString, z.ZodString], z.ZodUnknown>, z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            callback: (args_0: string, args_1: string, ...args_2: unknown[]) => string;
        }, {
            callback: (args_0: string, args_1: string, ...args_2: unknown[]) => string;
        }>, "many">>;
        documentSelectors: z.ZodOptional<z.ZodArray<z.ZodObject<{
            language: z.ZodOptional<z.ZodString>;
            scheme: z.ZodOptional<z.ZodString>;
            pattern: z.ZodOptional<z.ZodString>;
            notebookType: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            language?: string | undefined;
            scheme?: string | undefined;
            pattern?: string | undefined;
            notebookType?: string | undefined;
        }, {
            language?: string | undefined;
            scheme?: string | undefined;
            pattern?: string | undefined;
            notebookType?: string | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        messageReferenceMatchers?: ((args_0: {
            documentText: string;
        }, ...args_1: unknown[]) => Promise<{
            messageId: string;
            position: {
                start: {
                    line: number;
                    character: number;
                };
                end: {
                    line: number;
                    character: number;
                };
            };
        }[]>)[] | undefined;
        extractMessageOptions?: {
            callback: (args_0: string, args_1: string, ...args_2: unknown[]) => string;
        }[] | undefined;
        documentSelectors?: {
            language?: string | undefined;
            scheme?: string | undefined;
            pattern?: string | undefined;
            notebookType?: string | undefined;
        }[] | undefined;
    }, {
        messageReferenceMatchers?: ((args_0: {
            documentText: string;
        }, ...args_1: unknown[]) => Promise<{
            messageId: string;
            position: {
                start: {
                    line: number;
                    character: number;
                };
                end: {
                    line: number;
                    character: number;
                };
            };
        }[]>)[] | undefined;
        extractMessageOptions?: {
            callback: (args_0: string, args_1: string, ...args_2: unknown[]) => string;
        }[] | undefined;
        documentSelectors?: {
            language?: string | undefined;
            scheme?: string | undefined;
            pattern?: string | undefined;
            notebookType?: string | undefined;
        }[] | undefined;
    }>>;
    plugins: z.ZodUnion<[z.ZodUndefined, z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        config: z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        config: (...args: unknown[]) => unknown;
    }, {
        id: string;
        config: (...args: unknown[]) => unknown;
    }>, "many">]>;
}, "strip", z.ZodTypeAny, {
    referenceLanguage: string;
    languages: string[];
    readResources: (args_0: any, ...args_1: unknown[]) => Promise<{
        type: "Resource";
        body: {
            type: "Message";
            id: {
                type: "Identifier";
                name: string;
                metadata?: any;
            };
            pattern: {
                type: "Pattern";
                elements: ({
                    type: "Text";
                    value: string;
                    metadata?: any;
                } | {
                    type: "Placeholder";
                    body: {
                        type: "VariableReference";
                        name: string;
                        metadata?: any;
                    };
                    metadata?: any;
                })[];
                metadata?: any;
            };
            metadata?: any;
        }[];
        languageTag: {
            type: "LanguageTag";
            name: string;
            metadata?: any;
        };
        metadata?: any;
    }[]>;
    writeResources: (args_0: any, ...args_1: unknown[]) => Promise<void>;
    lint?: {
        rules: any[];
    } | undefined;
    ideExtension?: {
        messageReferenceMatchers?: ((args_0: {
            documentText: string;
        }, ...args_1: unknown[]) => Promise<{
            messageId: string;
            position: {
                start: {
                    line: number;
                    character: number;
                };
                end: {
                    line: number;
                    character: number;
                };
            };
        }[]>)[] | undefined;
        extractMessageOptions?: {
            callback: (args_0: string, args_1: string, ...args_2: unknown[]) => string;
        }[] | undefined;
        documentSelectors?: {
            language?: string | undefined;
            scheme?: string | undefined;
            pattern?: string | undefined;
            notebookType?: string | undefined;
        }[] | undefined;
    } | undefined;
    plugins?: {
        id: string;
        config: (...args: unknown[]) => unknown;
    }[] | undefined;
}, {
    referenceLanguage: string;
    languages: string[];
    readResources: (args_0: any, ...args_1: unknown[]) => Promise<{
        type: "Resource";
        body: {
            type: "Message";
            id: {
                type: "Identifier";
                name: string;
                metadata?: any;
            };
            pattern: {
                type: "Pattern";
                elements: ({
                    type: "Text";
                    value: string;
                    metadata?: any;
                } | {
                    type: "Placeholder";
                    body: {
                        type: "VariableReference";
                        name: string;
                        metadata?: any;
                    };
                    metadata?: any;
                })[];
                metadata?: any;
            };
            metadata?: any;
        }[];
        languageTag: {
            type: "LanguageTag";
            name: string;
            metadata?: any;
        };
        metadata?: any;
    }[]>;
    writeResources: (args_0: any, ...args_1: unknown[]) => Promise<void>;
    lint?: {
        rules: any[];
    } | undefined;
    ideExtension?: {
        messageReferenceMatchers?: ((args_0: {
            documentText: string;
        }, ...args_1: unknown[]) => Promise<{
            messageId: string;
            position: {
                start: {
                    line: number;
                    character: number;
                };
                end: {
                    line: number;
                    character: number;
                };
            };
        }[]>)[] | undefined;
        extractMessageOptions?: {
            callback: (args_0: string, args_1: string, ...args_2: unknown[]) => string;
        }[] | undefined;
        documentSelectors?: {
            language?: string | undefined;
            scheme?: string | undefined;
            pattern?: string | undefined;
            notebookType?: string | undefined;
        }[] | undefined;
    } | undefined;
    plugins?: {
        id: string;
        config: (...args: unknown[]) => unknown;
    }[] | undefined;
}>;
//# sourceMappingURL=zod.d.ts.map