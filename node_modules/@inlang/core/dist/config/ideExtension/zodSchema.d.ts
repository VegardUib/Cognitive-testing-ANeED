import * as z from "zod";
export declare const zodIdeExtensionConfigSchema: z.ZodObject<{
    /**
     * Defines matchers for message references inside the code.
     *
     * @param args represents the data to conduct the search on
     * @returns a promise with matched message references
     */
    messageReferenceMatchers: z.ZodOptional<z.ZodArray<z.ZodFunction<z.ZodTuple<[z.ZodObject<{
        documentText: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        documentText: string;
    }, {
        documentText: string;
    }>], z.ZodUnknown>, z.ZodPromise<z.ZodArray<z.ZodObject<{
        messageId: z.ZodString;
        position: z.ZodObject<{
            start: z.ZodObject<{
                line: z.ZodNumber;
                character: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                line: number;
                character: number;
            }, {
                line: number;
                character: number;
            }>;
            end: z.ZodObject<{
                line: z.ZodNumber;
                character: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                line: number;
                character: number;
            }, {
                line: number;
                character: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            start: {
                line: number;
                character: number;
            };
            end: {
                line: number;
                character: number;
            };
        }, {
            start: {
                line: number;
                character: number;
            };
            end: {
                line: number;
                character: number;
            };
        }>;
    }, "strip", z.ZodTypeAny, {
        messageId: string;
        position: {
            start: {
                line: number;
                character: number;
            };
            end: {
                line: number;
                character: number;
            };
        };
    }, {
        messageId: string;
        position: {
            start: {
                line: number;
                character: number;
            };
            end: {
                line: number;
                character: number;
            };
        };
    }>, "many">>>, "many">>;
    /**
     * Defines the options to extract messages.
     */
    extractMessageOptions: z.ZodOptional<z.ZodArray<z.ZodObject<{
        /**
         * Function which is called, when the user finished the message extraction command.
         *
         * @param messageId is the message identifier entered by the user
         * @param selection is the text which was extracted
         * @returns the code which is inserted into the document
         */
        callback: z.ZodFunction<z.ZodTuple<[z.ZodString, z.ZodString], z.ZodUnknown>, z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        callback: (args_0: string, args_1: string, ...args_2: unknown[]) => string;
    }, {
        callback: (args_0: string, args_1: string, ...args_2: unknown[]) => string;
    }>, "many">>;
    /**
     * An array of VSCode DocumentSelectors.
     *
     * The document selectors specify for which files/programming languages
     * (typescript, svelte, etc.) the extension should be activated.
     *
     * See https://code.visualstudio.com/api/references/document-selector
     */
    documentSelectors: z.ZodOptional<z.ZodArray<z.ZodObject<{
        language: z.ZodOptional<z.ZodString>;
        scheme: z.ZodOptional<z.ZodString>;
        pattern: z.ZodOptional<z.ZodString>;
        notebookType: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        language?: string | undefined;
        scheme?: string | undefined;
        pattern?: string | undefined;
        notebookType?: string | undefined;
    }, {
        language?: string | undefined;
        scheme?: string | undefined;
        pattern?: string | undefined;
        notebookType?: string | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    messageReferenceMatchers?: ((args_0: {
        documentText: string;
    }, ...args_1: unknown[]) => Promise<{
        messageId: string;
        position: {
            start: {
                line: number;
                character: number;
            };
            end: {
                line: number;
                character: number;
            };
        };
    }[]>)[] | undefined;
    extractMessageOptions?: {
        callback: (args_0: string, args_1: string, ...args_2: unknown[]) => string;
    }[] | undefined;
    documentSelectors?: {
        language?: string | undefined;
        scheme?: string | undefined;
        pattern?: string | undefined;
        notebookType?: string | undefined;
    }[] | undefined;
}, {
    messageReferenceMatchers?: ((args_0: {
        documentText: string;
    }, ...args_1: unknown[]) => Promise<{
        messageId: string;
        position: {
            start: {
                line: number;
                character: number;
            };
            end: {
                line: number;
                character: number;
            };
        };
    }[]>)[] | undefined;
    extractMessageOptions?: {
        callback: (args_0: string, args_1: string, ...args_2: unknown[]) => string;
    }[] | undefined;
    documentSelectors?: {
        language?: string | undefined;
        scheme?: string | undefined;
        pattern?: string | undefined;
        notebookType?: string | undefined;
    }[] | undefined;
}>;
//# sourceMappingURL=zodSchema.d.ts.map