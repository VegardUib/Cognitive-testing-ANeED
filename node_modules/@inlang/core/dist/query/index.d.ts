import type { Message, Resource } from "../ast/index.js";
import type { Result } from "../utilities/result.js";
/**
 * Query a resource.
 *
 * All actions are immutable.
 *
 * @example
 * 	const message = query(resource).get({ id: "first-message" });
 *
 * @example
 * 	const updatedResource = query(resource).delete({ id: "example" });
 */
export declare function query(resource: Resource): {
    /**
     * Creates a message in a resource.
     *
     * Returns an error if the message already exists, or the resource
     * does not exist.
     */
    create: (args: Parameters<typeof create>[1]) => Result<Record<string, unknown> & {
        type: "Resource";
        metadata?: any;
    } & {
        languageTag: Record<string, unknown> & {
            type: "LanguageTag";
            metadata?: any;
        } & {
            name: string;
        };
        body: (Record<string, unknown> & {
            type: "Message";
            metadata?: any;
        } & {
            id: Record<string, unknown> & {
                type: "Identifier";
                metadata?: any;
            } & {
                name: string;
            };
            pattern: Record<string, unknown> & {
                type: "Pattern";
                metadata?: any;
            } & {
                elements: ((Record<string, unknown> & {
                    type: "Text";
                    metadata?: any;
                } & {
                    value: string;
                }) | (Record<string, unknown> & {
                    type: "Placeholder";
                    metadata?: any;
                } & {
                    body: Record<string, unknown> & {
                        type: "VariableReference";
                        metadata?: any;
                    } & {
                        name: string;
                    };
                }))[];
            };
        })[];
    }, MessageAlreadyExistsException>;
    /**
     * Get a message.
     *
     * Returns undefined if the message does not exist.
     */
    get: (args: Parameters<typeof get>[1]) => (Record<string, unknown> & {
        type: "Message";
        metadata?: any;
    } & {
        id: Record<string, unknown> & {
            type: "Identifier";
            metadata?: any;
        } & {
            name: string;
        };
        pattern: Record<string, unknown> & {
            type: "Pattern";
            metadata?: any;
        } & {
            elements: ((Record<string, unknown> & {
                type: "Text";
                metadata?: any;
            } & {
                value: string;
            }) | (Record<string, unknown> & {
                type: "Placeholder";
                metadata?: any;
            } & {
                body: Record<string, unknown> & {
                    type: "VariableReference";
                    metadata?: any;
                } & {
                    name: string;
                };
            }))[];
        };
    }) | undefined;
    /**
     * Updates a message.
     *
     * Returns an error if the message does not exist.
     */
    update: (args: Parameters<typeof update>[1]) => Result<Record<string, unknown> & {
        type: "Resource";
        metadata?: any;
    } & {
        languageTag: Record<string, unknown> & {
            type: "LanguageTag";
            metadata?: any;
        } & {
            name: string;
        };
        body: (Record<string, unknown> & {
            type: "Message";
            metadata?: any;
        } & {
            id: Record<string, unknown> & {
                type: "Identifier";
                metadata?: any;
            } & {
                name: string;
            };
            pattern: Record<string, unknown> & {
                type: "Pattern";
                metadata?: any;
            } & {
                elements: ((Record<string, unknown> & {
                    type: "Text";
                    metadata?: any;
                } & {
                    value: string;
                }) | (Record<string, unknown> & {
                    type: "Placeholder";
                    metadata?: any;
                } & {
                    body: Record<string, unknown> & {
                        type: "VariableReference";
                        metadata?: any;
                    } & {
                        name: string;
                    };
                }))[];
            };
        })[];
    }, MessageDoesNotExistsException>;
    /**
     * Upserts a message.
     */
    upsert: (args: Parameters<typeof upsert>[1]) => Result<Record<string, unknown> & {
        type: "Resource";
        metadata?: any;
    } & {
        languageTag: Record<string, unknown> & {
            type: "LanguageTag";
            metadata?: any;
        } & {
            name: string;
        };
        body: (Record<string, unknown> & {
            type: "Message";
            metadata?: any;
        } & {
            id: Record<string, unknown> & {
                type: "Identifier";
                metadata?: any;
            } & {
                name: string;
            };
            pattern: Record<string, unknown> & {
                type: "Pattern";
                metadata?: any;
            } & {
                elements: ((Record<string, unknown> & {
                    type: "Text";
                    metadata?: any;
                } & {
                    value: string;
                }) | (Record<string, unknown> & {
                    type: "Placeholder";
                    metadata?: any;
                } & {
                    body: Record<string, unknown> & {
                        type: "VariableReference";
                        metadata?: any;
                    } & {
                        name: string;
                    };
                }))[];
            };
        })[];
    }, Error>;
    /**
     * Delete a message.
     *
     * Returns an error if the message did not exist.
     */
    delete: (args: Parameters<typeof get>[1]) => Result<Record<string, unknown> & {
        type: "Resource";
        metadata?: any;
    } & {
        languageTag: Record<string, unknown> & {
            type: "LanguageTag";
            metadata?: any;
        } & {
            name: string;
        };
        body: (Record<string, unknown> & {
            type: "Message";
            metadata?: any;
        } & {
            id: Record<string, unknown> & {
                type: "Identifier";
                metadata?: any;
            } & {
                name: string;
            };
            pattern: Record<string, unknown> & {
                type: "Pattern";
                metadata?: any;
            } & {
                elements: ((Record<string, unknown> & {
                    type: "Text";
                    metadata?: any;
                } & {
                    value: string;
                }) | (Record<string, unknown> & {
                    type: "Placeholder";
                    metadata?: any;
                } & {
                    body: Record<string, unknown> & {
                        type: "VariableReference";
                        metadata?: any;
                    } & {
                        name: string;
                    };
                }))[];
            };
        })[];
    }, MessageDoesNotExistsException>;
    /**
     * Included message ids in a resource.
     */
    includedMessageIds: () => string[];
};
declare class MessageAlreadyExistsException extends Error {
    #private;
    constructor(messageId: string, resourceId: string);
}
declare function create(resource: Resource, args: {
    message: Message;
}): Result<Resource, MessageAlreadyExistsException>;
declare function upsert(resource: Resource, args: {
    message: Message;
}): Result<Resource, Error>;
declare function get(resource: Resource, args: {
    id: Message["id"]["name"];
}): Message | undefined;
declare class MessageDoesNotExistsException extends Error {
    #private;
    constructor(messageId: string, resourceId: string);
}
declare function update(resource: Resource, args: {
    id: Message["id"]["name"];
    with: Message;
}): Result<Resource, MessageDoesNotExistsException>;
export {};
//# sourceMappingURL=index.d.ts.map