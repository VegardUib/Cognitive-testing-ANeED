import "./chunk-6A2TAOKG.js";
import {
  inlangSymbol,
  replaceLanguageInUrl
} from "./chunk-ULCBW442.js";
import "./chunk-E6ZP6LG5.js";
import {
  getContext,
  get_store_value,
  setContext
} from "./chunk-RVLVW3YK.js";
import "./chunk-2B2CG5KL.js";

// node_modules/@inlang/sdk-js/dist/adapter-sveltekit/runtime/client/not-reactive/context.js
import { goto } from "$app/navigation";
import { page } from "$app/stores";

// node_modules/@inlang/sdk-js/dist/adapter-sveltekit/runtime/client/shared/context.js
var getRuntimeFromContext = () => {
  try {
    return getContext(inlangSymbol);
  } catch (e) {
    throw Error(`
You cannot directly access any '@inlang/sdk-js' imports in this scope. You need to pass them from 'handle' or 'load' to the function you want to call e.g.

// -- Change this -------------------------------------------------------------

import { i } from '@inlang/sdk-js'

export const load = async () => {
   return { title: getPageTitle() }
}

const getPageTitle = () => {
   console.log(i('hello.inlang'))
}

// -- To this -----------------------------------------------------------------

import { i } from '@inlang/sdk-js'

export const load = async () => {
   return { title: getPageTitle(i) }
}

const getPageTitle = (/** @type { import('@inlang/sdk-js/runtime').InlangFunction } */ i) => {
   console.log(i('hello.inlang'))
}

// ----------------------------------------------------------------------------
`, { cause: e });
  }
};

// node_modules/@inlang/sdk-js/dist/adapter-sveltekit/runtime/client/not-reactive/context.js
var getRuntimeFromContext2 = () => getRuntimeFromContext();
var addRuntimeToContext = (runtime) => {
  const { language, referenceLanguage, languages, i, loadResource } = runtime;
  const switchLanguage = async (language2) => {
    if (runtime.language === language2)
      return;
    return goto(replaceLanguageInUrl(get_store_value(page).url, language2), { invalidateAll: true });
  };
  setContext(inlangSymbol, {
    language,
    referenceLanguage,
    languages,
    i,
    loadResource,
    switchLanguage,
    route: route.bind(void 0, language)
  });
};
var route = (language, href) => {
  if (!href.startsWith("/"))
    return href;
  const url = `/${language}${href}`;
  return url.endsWith("/") ? url.slice(0, -1) : url;
};
export {
  addRuntimeToContext,
  getRuntimeFromContext2 as getRuntimeFromContext
};
//# sourceMappingURL=@inlang_sdk-js_adapter-sveltekit_client_not-reactive.js.map
